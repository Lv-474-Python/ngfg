FROM python:3.8.2-alpine
ADD requirements.txt .
RUN apk update
RUN apk add postgresql-dev gcc python3-dev musl-dev
RUN apk add gcc libc-dev make git libffi-dev openssl-dev python3-dev libxml2-dev libxslt-dev
RUN pip install -r requirements.txt

#declaring all variables
ARG HOST
ENV HOST $HOST
ARG PORT 
ENV PORT $PORT
ARG GOOGLE_CLIENT_ID
ENV GOOGLE_CLIENT_ID $GOOGLE_CLIENT_ID
ARG GOOGLE_CLIENT_SECRET
ENV GOOGLE_CLIENT_SECRET $GOOGLE_CLIENT_SECRET
ARG POSTGRES_USER 
ENV POSTGRES_USER $POSTGRES_USER 
ARG POSTGRES_PASSWORD
ENV POSTGRES_PASSWORD $POSTGRES_PASSWORD
ARG DB_NAME
ENV DB_NAME $DB_NAME
ARG APP_SECRET_KEY
ENV APP_SECRET_KEY $APP_SECRET_KEY
ARG OAUTHLIB_INSECURE_TRANSPORT
ENV OAUTHLIB_INSECURE_TRANSPORT $OAUTHLIB_INSECURE_TRANSPORT
ARG MAIL_USERNAME
ENV MAIL_USERNAME $MAIL_USERNAME
ARG MAIL_PASSWORD
ENV MAIL_PASSWORD $MAIL_PASSWORD
ARG CELERY_BROKER_URL
ENV CELERY_BROKER_URL $CELERY_BROKER_URL
ARG CELERY_RESULT_BACKEND
ENV CELERY_RESULT_BACKEND $CELERY_RESULT_BACKEND
ARG CELERY_DEFAULT_QUEUE
ENV CELERY_DEFAULT_QUEUE $CELERY_DEFAULT_QUEUE
ARG REDIS_PASSWORD
ENV REDIS_PASSWORD $REDIS_PASSWORD
ARG SECRET_KEY
ENV SECRET_KEY $SECRET_KEY
#end of declaring

RUN apk add postgresql-client
COPY ./src/ /ngfg/
WORKDIR /ngfg
EXPOSE 8000

ENTRYPOINT ["./entrypoint.sh"]
